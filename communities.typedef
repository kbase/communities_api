/*

Communities object and resource API
For usage note that required parameters need to be passed as path parameters, optional parameters need to be query parameters. If an optional parameter has a list of option values, the first displayed will be used as default.

*/
module CommunitiesAPI : CommunitiesAPI {
	typedef structure {
/*
	version of the object
*/
		int version;
/*
	reference to the project of this sample
*/
		string project;
/*
	human readable identifier
*/
		string name;
/*
	a list of references to the related metagenome objects
*/
		list<string> metagenomes;
/*
	a list of references to the related library objects
*/
		list<string> libraries;
/*
	time the object was first created
*/
		string created;
/*
	environmental package object
*/
		get_sample_instance_env_package_object env_package;
/*
	resource location of this object instance
*/
		string url;
/*
	unique object identifier
*/
		string id;
/*
	key value pairs describing metadata
*/
		mapping<string, string> metadata;
	} SampleInstance;
	typedef structure {
/*
	a list of references to the related metagenome objects
*/
		list<string> analyzed;
/*
	version of the object
*/
		int version;
/*
	human readable identifier
*/
		string name;
/*
	a short, comprehensive description of the project
*/
		string description;
/*
	a list of references to the related library objects
*/
		list<string> libraries;
/*
	time the object was first created
*/
		string created;
/*
	a list of references to the related sample objects
*/
		list<string> samples;
/*
	the official name of the source of funding of this project
*/
		string funding_source;
/*
	resource location of this object instance
*/
		string url;
/*
	key value pairs describing metadata
*/
		mapping<string, string> metadata;
/*
	unique object identifier
*/
		string id;
/*
	the first and last name of the principal investigator of the project
*/
		string pi;
	} ProjectInstance;
	typedef structure {
/*
	version of the object
*/
		int version;
/*
	reference to the project object
*/
		string project;
/*
	human readable identifier
*/
		string name;
/*
	reference to the related library object
*/
		string library;
/*
	sequencing type
*/
		string sequence_type;
/*
	time the object was first created
*/
		string created;
/*
	resource location of this object instance
*/
		string url;
/*
	unique object identifier
*/
		string id;
/*
	reference to the related sample object
*/
		string sample;
/*
	key value pairs describing metadata
*/
		mapping<string, string> metadata;
	} MetagenomeInstance;
	typedef structure {
/*
	version of the object
*/
		int version;
/*
	reference to the project object
*/
		string project;
/*
	human readable identifier
*/
		string name;
/*
	a list of references to the related sequence sets
*/
		list<string> sequencesets;
/*
	reference to the related metagenome object
*/
		string metagenome;
/*
	time the object was first created
*/
		string created;
/*
	resource location of this object instance
*/
		string url;
/*
	unique object identifier
*/
		string id;
/*
	reference to the related sample object
*/
		string sample;
/*
	key value pairs describing metadata
*/
		mapping<string, string> metadata;
	} LibraryInstance;
/*
	rows object
*/
	typedef structure {
/*
	key value pairs describing metadata
*/
		mapping<string, string> metadata;
/*
	unique identifier
*/
		string id;
	} get_abundanceprofile_instance_rows_object;
/*
	columns object
*/
	typedef structure {
/*
	list of metadata, contains the metagenome
*/
		mapping<string, string> metadata;
/*
	unique identifier
*/
		string id;
	} get_abundanceprofile_instance_columns_object;
	typedef structure {
/*

This parameter value can be chosen from the following (the first being default):

	minimal - returns only minimal information
	verbose - returns all metadata
	full - returns all references

*/
		string verbosity;
/*

This parameter value can be chosen from the following (the first being default):

	M5RNA - comprehensive RNA database, type organism and feature only
	RDP - RNA database, type organism and feature only
	Greengenes - RNA database, type organism and feature only
	LSU - RNA database, type organism and feature only
	SSU - RNA database, type organism and feature only
	M5NR - comprehensive protein database, type organism and feature only
	SwissProt - protein database, type organism and feature only
	GenBank - protein database, type organism and feature only
	IMG - protein database, type organism and feature only
	SEED - protein database, type organism and feature only
	TrEMBL - protein database, type organism and feature only
	RefSeq - protein database, type organism and feature only
	PATRIC - protein database, type organism and feature only
	eggNOG - protein database, type organism and feature only
	KEGG - protein database, type organism and feature only
	NOG - ontology database, type function only
	COG - ontology database, type function only
	KO - ontology database, type function only
	GO - ontology database, type function only
	Subsystems - ontology database, type function only

*/
		string source;
/*

	unique object identifier

*/
		string id;
/*

This parameter value can be chosen from the following (the first being default):

	organism - return organism data
	function - return functional data
	feature - return feature data

*/
		string type;
	} get_abundanceprofile_instance_params;
	typedef structure {
/*
	identifier of the data generator
*/
		string generated_by;
/*
	type of the data encoding matrix (dense or sparse)
*/
		string matrix_type;
/*
	time the output data was generated
*/
		string date;
/*
	the matrix values
*/
		list<list<float>> data;
/*
	rows object
*/
		list<get_abundanceprofile_instance_rows_object> rows;
/*
	data type of the elements in the return matrix
*/
		string matrix_element_type;
/*
	url to the format specification
*/
		string format_url;
/*
	format specification name
*/
		string format;
/*
	columns object
*/
		list<get_abundanceprofile_instance_columns_object> columns;
/*
	unique object identifier
*/
		string id;
/*
	type of the data in the return table (taxon, function or gene)
*/
		string type;
/*
	list of the dimension sizes of the return matrix
*/
		list<int> shape;
	} AbundanceprofileInstance;
	typedef structure {
/*

This parameter value can be chosen from the following (the first being default):

	minimal - returns only minimal information

*/
		string verbosity;
/*

This parameter value can be chosen from the following (the first being default):

	id - return data objects ordered by id
	name - return data objects ordered by name

*/
		string order;
/*

	maximum number of items requested

*/
		int limit;
/*

	zero based index of the first data object to be returned

*/
		int offset;
	} get_library_query_params;
	typedef structure {
/*
	link to the previous set or null if this is the first set
*/
		string next;
/*
	link to the next set or null if this is the last set
*/
		string prev;
/*
	name of the attribute the returned data is ordered by
*/
		string order;
/*
	maximum number of data items returned, default is 10
*/
		int limit;
/*
	list of the library objects
*/
		list<LibraryInstance> data;
/*
	zero based index of the first returned data item
*/
		int offset;
/*
	total number of available data items
*/
		int total_count;
	} LibraryQuery;
	typedef structure {
/*

This parameter value can be chosen from the following (the first being default):

	minimal - returns only minimal information
	verbose - returns a standard subselection of metadata
	full - returns all connected metadata

*/
		string verbosity;
/*

	unique object identifier

*/
		string id;
	} get_library_instance_params;
	typedef structure {
/*

This parameter value can be chosen from the following (the first being default):

	minimal - returns only minimal information
	verbose - returns a standard subselection of metadata
	full - returns all connected metadata

*/
		string verbosity;
/*

This parameter value can be chosen from the following (the first being default):

	id - return data objects ordered by id
	name - return data objects ordered by name

*/
		string order;
/*

	maximum number of items requested

*/
		int limit;
/*

	zero based index of the first data object to be returned

*/
		int offset;
	} get_metagenome_query_params;
	typedef structure {
/*
	link to the previous set or null if this is the first set
*/
		string next;
/*
	link to the next set or null if this is the last set
*/
		string prev;
/*
	name of the attribute the returned data is ordered by
*/
		string order;
/*
	maximum number of data items returned, default is 10
*/
		int limit;
/*
	list of the metagenome objects
*/
		list<MetagenomeInstance> data;
/*
	zero based index of the first returned data item
*/
		int offset;
/*
	total number of available data items
*/
		int total_count;
	} MetagenomeQuery;
	typedef structure {
/*

This parameter value can be chosen from the following (the first being default):

	minimal - returns only minimal information
	verbose - returns a standard subselection of metadata
	full - returns all connected metadata

*/
		string verbosity;
/*

	unique object identifier

*/
		string id;
	} get_metagenome_instance_params;
	typedef structure {
/*

This parameter value can be chosen from the following (the first being default):

	minimal - returns only minimal information
	verbose - returns all metadata
	full - returns all metadata and references

*/
		string verbosity;
/*

This parameter value can be chosen from the following (the first being default):

	id - return data objects ordered by id
	name - return data objects ordered by name

*/
		string order;
/*

	maximum number of items requested

*/
		int limit;
/*

	zero based index of the first data object to be returned

*/
		int offset;
	} get_project_query_params;
	typedef structure {
/*
	link to the previous set or null if this is the first set
*/
		string next;
/*
	link to the next set or null if this is the last set
*/
		string prev;
/*
	name of the attribute the returned data is ordered by
*/
		string order;
/*
	maximum number of data items returned, default is 10
*/
		int limit;
/*
	list of the project objects
*/
		list<ProjectInstance> data;
/*
	zero based index of the first returned data item
*/
		int offset;
/*
	total number of available data items
*/
		int total_count;
	} ProjectQuery;
	typedef structure {
/*

This parameter value can be chosen from the following (the first being default):

	minimal - returns only minimal information
	verbose - returns all metadata
	full - returns all metadata and references

*/
		string verbosity;
/*

	unique object identifier

*/
		string id;
	} get_project_instance_params;
	typedef structure {
/*

This parameter value can be chosen from the following (the first being default):

	id - return data objects ordered by id
	name - return data objects ordered by name

*/
		string order;
/*

	maximum number of items requested

*/
		int limit;
/*

	zero based index of the first data object to be returned

*/
		int offset;
	} get_sample_query_params;
	typedef structure {
/*
	link to the previous set or null if this is the first set
*/
		string next;
/*
	link to the next set or null if this is the last set
*/
		string prev;
/*
	name of the attribute the returned data is ordered by
*/
		string order;
/*
	maximum number of data items returned, default is 10
*/
		int limit;
/*
	list of sample objects
*/
		list<SampleInstance> data;
/*
	zero based index of the first returned data item
*/
		int offset;
/*
	total number of available data items
*/
		int total_count;
	} SampleQuery;
/*
	environmental package object
*/
	typedef structure {
/*
	creation date
*/
		string created;
/*
	name of the package
*/
		string name;
/*
	unique package identifier
*/
		string id;
/*
	package type
*/
		string type;
/*
	key value pairs describing metadata
*/
		mapping<string, string> metadata;
	} get_sample_instance_env_package_object;
	typedef structure {
/*

This parameter value can be chosen from the following (the first being default):

	minimal - returns only minimal information
	verbose - returns all metadata
	full - returns all metadata and references

*/
		string verbosity;
/*

	unique object identifier

*/
		string id;
	} get_sample_instance_params;
	typedef structure {
/*

	unique metagenome identifier

*/
		string id;
/*

This parameter value can be chosen from the following (the first being default):

	dna - return DNA sequences
	protein - return protein sequences

*/
		string sequence_type;
/*

	md5 identifier

*/
		list<string> md5;
	} get_sequences_md5_params;
	typedef structure {
/*
	version of the object
*/
		int version;
/*
	resource location of this object instance
*/
		string url;
/*
	a hash of data_type to list of sequences
*/
		list<mapping<string, string>> data;
/*
	unique object identifier
*/
		string id;
	} SequencesMd5;
	typedef structure {
/*

This parameter value can be chosen from the following (the first being default):

	M5RNA - comprehensive RNA database, type organism and feature only
	RDP - RNA database, type organism and feature only
	Greengenes - RNA database, type organism and feature only
	LSU - RNA database, type organism and feature only
	SSU - RNA database, type organism and feature only
	M5NR - comprehensive protein database, type organism and feature only
	SwissProt - protein database, type organism and feature only
	GenBank - protein database, type organism and feature only
	IMG - protein database, type organism and feature only
	SEED - protein database, type organism and feature only
	TrEMBL - protein database, type organism and feature only
	RefSeq - protein database, type organism and feature only
	PATRIC - protein database, type organism and feature only
	eggNOG - protein database, type organism and feature only
	KEGG - protein database, type organism and feature only
	NOG - ontology database, type function only
	COG - ontology database, type function only
	KO - ontology database, type function only
	GO - ontology database, type function only
	Subsystems - ontology database, type function only

*/
		string source;
/*

This parameter value can be chosen from the following (the first being default):

	organism - return organism data
	function - return function data
	ontology - return ontology data

*/
		string data_type;
/*

	function to filter by

*/
		list<string> function;
/*

	unique metagenome identifier

*/
		string id;
/*

This parameter value can be chosen from the following (the first being default):

	dna - return DNA sequences
	protein - return protein sequences

*/
		string sequence_type;
/*

	organism name

*/
		string organism;
	} get_sequences_annotation_params;
	typedef structure {
/*
	version of the object
*/
		int version;
/*
	resource location of this object instance
*/
		string url;
/*
	a hash of data_type to list of sequences
*/
		list<mapping<string, string>> data;
/*
	unique object identifier
*/
		string id;
	} SequencesAnnotation;
	typedef structure {
/*

	unique sequence set identifier - to get a list of all identifiers for a metagenome, use the setlist request

*/
		string id;
	} get_sequenceset_instance_params;
	typedef structure {
/*
	requested sequence file
*/
		string data;
	} SequencesetInstance;
	typedef structure {
/*

	unique metagenome identifier

*/
		string id;
	} get_sequenceset_setlist_params;
	typedef structure {
/*
	name of the stage in processing of this sequence file
*/
		string stage_name;
/*
	name of the sequence file
*/
		string file_name;
/*
	url for retrieving this sequence file
*/
		string url;
/*
	unique identifier of the sequence file
*/
		string id;
/*
	type of the sequence file within a stage, i.e. passed or removed for quality control steps
*/
		string stage_type;
/*
	three digit numerical identifier of the stage
*/
		string stage_id;
	} SequencesetSetlist;


/* A profile in biom format that contains abundance counts
Returns a single data object.
*/
	funcdef get_abundanceprofile_instance(get_abundanceprofile_instance_params) returns (AbundanceprofileInstance);


/* A library of metagenomic samples from some environment
Returns a set of data matching the query criteria.
*/
	funcdef get_library_query(get_library_query_params) returns (LibraryQuery);


/* A library of metagenomic samples from some environment
Returns a single data object.
*/
	funcdef get_library_instance(get_library_instance_params) returns (LibraryInstance);


/* A metagenome is an analyzed set sequences from a sample of some environment
Returns a set of data matching the query criteria.
*/
	funcdef get_metagenome_query(get_metagenome_query_params) returns (MetagenomeQuery);


/* A metagenome is an analyzed set sequences from a sample of some environment
Returns a single data object.
*/
	funcdef get_metagenome_instance(get_metagenome_instance_params) returns (MetagenomeInstance);


/* A project is a composition of samples, libraries and metagenomes being analyzed in a global context.
Returns a set of data matching the query criteria.
*/
	funcdef get_project_query(get_project_query_params) returns (ProjectQuery);


/* A project is a composition of samples, libraries and metagenomes being analyzed in a global context.
Returns a single data object.
*/
	funcdef get_project_instance(get_project_instance_params) returns (ProjectInstance);


/* A metagenomic sample from some environment.
Returns a set of data matching the query criteria.
*/
	funcdef get_sample_query(get_sample_query_params) returns (SampleQuery);


/* A metagenomic sample from some environment.
Returns a single data object.
*/
	funcdef get_sample_instance(get_sample_instance_params) returns (SampleInstance);


/* A set of genomic sequences of a metagenome annotated by a specified source
Returns a single data object.
*/
	funcdef get_sequences_md5(get_sequences_md5_params) returns (SequencesMd5);


/* A set of genomic sequences of a metagenome annotated by a specified source
Returns a single data object.
*/
	funcdef get_sequences_annotation(get_sequences_annotation_params) returns (SequencesAnnotation);


/* A set / subset of genomic sequences of a metagenome from a specific stage in its analysis
Returns a single sequence file.
*/
	funcdef get_sequenceset_instance(get_sequenceset_instance_params) returns (SequencesetInstance);


/* A set / subset of genomic sequences of a metagenome from a specific stage in its analysis
Returns a list of sets for the given id.
*/
	funcdef get_sequenceset_setlist(get_sequenceset_setlist_params) returns (SequencesetSetlist);
};