/*

RESTful Metagenomics RAST object and resource API
For usage note that required parameters need to be passed as path parameters, optional parameters need to be query parameters. If an optional parameter has a list of option values, the first displayed will be used as default.

*/
module MG_RAST : MG_RAST {
	typedef structure {
/*

This parameter value can be chosen from the following (the first being default):

	RefSeq - protein database, type organism, function, feature
	GenBank - protein database, type organism, function, feature
	IMG - protein database, type organism, function, feature
	SEED - protein database, type organism, function, feature
	TrEMBL - protein database, type organism, function, feature
	SwissProt - protein database, type organism, function, feature
	PATRIC - protein database, type organism, function, feature
	KEGG - protein database, type organism, function, feature
	RDP - RNA database, type organism, function, feature
	Greengenes - RNA database, type organism, function, feature
	LSU - RNA database, type organism, function, feature
	SSU - RNA database, type organism, function, feature
	Subsystems - ontology database, type ontology only
	NOG - ontology database, type ontology only
	COG - ontology database, type ontology only
	KO - ontology database, type ontology only

*/
		string source;
/*

	text string to filter annotations by: only return those that contain text

*/
		string filter;
/*

	value for minimum alignment length cutoff: default is 15

*/
		int length;
/*

	percent value for minimum % identity cutoff: default is 60

*/
		int identity;
/*

	negative exponent value for maximum e-value cutoff: default is 5

*/
		int evalue;
/*

This parameter value can be chosen from the following (the first being default):

	organism - return organism data
	function - return function data
	ontology - return ontology data
	feature - return feature data

*/
		string type;
/*

	unique metagenome identifier

*/
		string id;
/*

	hierarchal level to filter annotations by, for organism or ontology only

*/
		string filter_level;
	} GetAnnotationSequenceParams;
	typedef structure {
/*
	tab deliminted annotated sequence stream
*/
		mapping<string, string> streaming text;
	} AnnotationSequence;
	typedef structure {
/*

This parameter value can be chosen from the following (the first being default):

	RefSeq - protein database, type organism, function, feature
	GenBank - protein database, type organism, function, feature
	IMG - protein database, type organism, function, feature
	SEED - protein database, type organism, function, feature
	TrEMBL - protein database, type organism, function, feature
	SwissProt - protein database, type organism, function, feature
	PATRIC - protein database, type organism, function, feature
	KEGG - protein database, type organism, function, feature
	RDP - RNA database, type organism, function, feature
	Greengenes - RNA database, type organism, function, feature
	LSU - RNA database, type organism, function, feature
	SSU - RNA database, type organism, function, feature
	Subsystems - ontology database, type ontology only
	NOG - ontology database, type ontology only
	COG - ontology database, type ontology only
	KO - ontology database, type ontology only

*/
		string source;
/*

	text string to filter annotations by: only return those that contain text

*/
		string filter;
/*

	value for minimum alignment length cutoff: default is 15

*/
		int length;
/*

	percent value for minimum % identity cutoff: default is 60

*/
		int identity;
/*

	negative exponent value for maximum e-value cutoff: default is 5

*/
		int evalue;
/*

This parameter value can be chosen from the following (the first being default):

	organism - return organism data
	function - return function data
	ontology - return ontology data
	feature - return feature data

*/
		string type;
/*

	unique metagenome identifier

*/
		string id;
/*

	hierarchal level to filter annotations by, for organism or ontology only

*/
		string filter_level;
	} GetAnnotationSimilarityParams;
	typedef structure {
/*
	tab deliminted blast m8 with annotation
*/
		mapping<string, string> streaming text;
	} AnnotationSimilarity;
	typedef structure {
/*

	column id

*/
		list<string> columns;
/*

	raw value

*/
		list<list> data;
/*

	row id

*/
		list<string> rows;
	} PostComputeNormalizeParams;
	typedef structure {
/*
	column id
*/
		list<string> columns;
/*
	normalized value
*/
		list<list<float>> data;
/*
	row id
*/
		list<string> rows;
	} ComputeNormalize;
	typedef structure {
/*

This parameter value can be chosen from the following (the first being default):

	ward - ward cluster method
	single - single cluster method
	complete - complete cluster method
	mcquitty - mcquitty cluster method
	median - median cluster method
	centroid - centroid cluster method

*/
		string cluster;
/*

This parameter value can be chosen from the following (the first being default):

	bray-curtis - bray-curtis distance method
	euclidean - euclidean distance method
	maximum - maximum distance method
	manhattan - manhattan distance method
	canberra - canberra distance method
	minkowski - minkowski distance method
	difference - difference distance method

*/
		string distance;
/*

	column id

*/
		list<string> columns;
/*

	raw or normalized value

*/
		list<list> data;
/*

	row id

*/
		list<string> rows;
/*

	option to use raw data (not normalize)

*/
		int raw;
	} PostComputeHeatmapParams;
	typedef structure {
/*
	column id index
*/
		list<float> colindex;
/*
	dendogram object for columns
*/
		mapping<string, string> coldend;
/*
	row id index
*/
		list<float> rowindex;
/*
	column id
*/
		list<string> columns;
/*
	normalized value
*/
		list<list<float>> data;
/*
	dendogram object for rows
*/
		mapping<string, string> rowdend;
/*
	row id
*/
		list<string> rows;
	} ComputeHeatmap;
	typedef structure {
/*

This parameter value can be chosen from the following (the first being default):

	bray-curtis - bray-curtis distance method
	euclidean - euclidean distance method
	maximum - maximum distance method
	manhattan - manhattan distance method
	canberra - canberra distance method
	minkowski - minkowski distance method
	difference - difference distance method

*/
		string distance;
/*

	column id

*/
		list<string> columns;
/*

	raw or normalized value

*/
		list<list> data;
/*

	row id

*/
		list<string> rows;
/*

	option to use raw data (not normalize)

*/
		int raw;
	} PostComputePcoaParams;
	typedef structure {
/*
	average principal component value
*/
		list<float> pco;
/*
	pcoa object
*/
		list<mapping<string, string>> data;
	} ComputePcoa;
	typedef structure {
/*

	file name or identifier

*/
		string file;
/*

	unique metagenome identifier

*/
		string id;
	} GetDownloadInstanceParams;
	typedef structure {
/*
	requested analysis file
*/
		string data;
	} DownloadInstance;
	typedef structure {
/*

	stage name or identifier

*/
		string stage;
/*

	unique metagenome identifier

*/
		string id;
	} GetDownloadSetlistParams;
	typedef structure {
/*
	name of the stage in processing of this file
*/
		string stage_name;
/*
	name of the analysis file
*/
		string file_name;
/*
	url for retrieving this analysis file
*/
		string url;
/*
	unique metagenome identifier
*/
		string id;
/*
	unique identifier of file in stage
*/
		string file_id;
/*
	type of the analysis file within a stage, i.e. passed or removed for quality control steps
*/
		string stage_type;
/*
	three digit numerical identifier of the stage
*/
		string stage_id;
	} DownloadSetlist;
	typedef structure {
/*

	unique string of text generated by MG-RAST for your account

*/
		string auth;
	} GetInboxViewParams;
	typedef structure {
/*
	timestamp for return of this query
*/
		string timestamp;
/*
	list of file objects
*/
		list<mapping<string, string>> files;
/*
	resource location of this object instance
*/
		string url;
/*
	user login
*/
		string id;
	} InboxView;
	typedef structure {
/*

	unique string of text generated by MG-RAST for your account

*/
		string auth;
/*

	file to upload to inbox

*/
		string upload;
	} PostInboxUploadParams;
	typedef structure {
/*
	timestamp for return of this query
*/
		string timestamp;
/*
	status message
*/
		string status;
/*
	user login
*/
		string id;
	} InboxUpload;
	typedef structure {
/*

This parameter value can be chosen from the following (the first being default):

	minimal - returns only minimal information

*/
		string verbosity;
/*

This parameter value can be chosen from the following (the first being default):

	id - return data objects ordered by id
	name - return data objects ordered by name

*/
		string order;
/*

	maximum number of items requested

*/
		int limit;
/*

	zero based index of the first data object to be returned

*/
		int offset;
	} GetLibraryQueryParams;
	typedef structure {
/*
	link to the previous set or null if this is the first set
*/
		string next;
/*
	link to the next set or null if this is the last set
*/
		string prev;
/*
	name of the attribute the returned data is ordered by
*/
		string order;
/*
	maximum number of data items returned, default is 10
*/
		int limit;
/*
	list of the library objects
*/
		list<mapping<string, string>> data;
/*
	zero based index of the first returned data item
*/
		int offset;
/*
	total number of available data items
*/
		int total_count;
	} LibraryQuery;
	typedef structure {
/*

This parameter value can be chosen from the following (the first being default):

	minimal - returns only minimal information
	verbose - returns a standard subselection of metadata
	full - returns all connected metadata

*/
		string verbosity;
/*

	unique object identifier

*/
		string id;
	} GetLibraryInstanceParams;
	typedef structure {
/*
	version of the object
*/
		int version;
/*
	reference to the project object
*/
		string project;
/*
	human readable identifier
*/
		string name;
/*
	reference to the related metagenome object
*/
		string metagenome;
/*
	time the object was first created
*/
		string created;
/*
	resource location of this object instance
*/
		string url;
/*
	unique object identifier
*/
		string id;
/*
	reference to the related sample object
*/
		string sample;
/*
	key value pairs describing metadata
*/
		mapping<string, string> metadata;
	} LibraryInstance;
	typedef structure {
/*

This parameter value can be chosen from the following (the first being default):

	Subsystems - ontology database, type ontology only
	NOG - ontology database, type ontology only
	COG - ontology database, type ontology only
	KO - ontology database, type ontology only

*/
		string source;
/*

	text of ontology group (filter_level) to filter by

*/
		string filter;
/*

This parameter value can be chosen from the following (the first being default):

	function - bottom ontology level
	level3 - ontology level
	level2 - ontology level
	level1 - top ontology level

*/
		string filter_level;
/*

This parameter value can be chosen from the following (the first being default):

	function - bottom ontology level
	level3 - ontology level
	level2 - ontology level
	level1 - top ontology level

*/
		string min_level;
	} GetM5nrOntologyParams;
	typedef structure {
/*
	version of the object
*/
		int version;
/*
	resource location of this object instance
*/
		string url;
/*
	ontology object
*/
		list<mapping<string, string>> data;
	} M5nrOntology;
	typedef structure {
/*

	text of taxanomy group (filter_level) to filter by

*/
		string filter;
/*

This parameter value can be chosen from the following (the first being default):

	species - taxonomy level
	genus - taxonomy level
	family - taxonomy level
	order -  taxonomy level
	class -  taxonomy level
	phylum - taxonomy level
	domain - top taxonomy level

*/
		string filter_level;
/*

This parameter value can be chosen from the following (the first being default):

	species - taxonomy level
	genus - taxonomy level
	family - taxonomy level
	order -  taxonomy level
	class -  taxonomy level
	phylum - taxonomy level
	domain - top taxonomy level

*/
		string min_level;
	} GetM5nrTaxonomyParams;
	typedef structure {
/*
	version of the object
*/
		int version;
/*
	resource location of this object instance
*/
		string url;
/*
	taxonomy object
*/
		list<mapping<string, string>> data;
	} M5nrTaxonomy;
	typedef structure {
/*
	version of the object
*/
		int version;
/*
	resource location of this object instance
*/
		string url;
/*
	source object
*/
		list<mapping<string, string>> data;
	} M5nrSources;
	typedef structure {
/*

	name of the attribute the returned data is ordered by

*/
		string order;
/*

	unique identifier from source DB

*/
		string id;
/*

	maximum number of items requested

*/
		int limit;
/*

	zero based index of the first data object to be returned

*/
		int offset;
	} GetM5nrAccessionParams;
	typedef structure {
/*
	link to the previous set or null if this is the first set
*/
		string next;
/*
	link to the next set or null if this is the last set
*/
		string prev;
/*
	version of the object
*/
		int version;
/*
	annotation object
*/
		list<mapping<string, string>> data;
/*
	total number of available data items
*/
		int total_count;
/*
	resource location of this object instance
*/
		string url;
/*
	maximum number of data items returned, default is 10
*/
		int limit;
/*
	zero based index of the first returned data item
*/
		int offset;
	} M5nrAccession;
	typedef structure {
/*

	source name to restrict search by

*/
		string source;
/*

	if true return sequence output, else return annotation output, default is false

*/
		int sequence;
/*

	name of the attribute the returned data is ordered by

*/
		string order;
/*

	unique identifier in form of md5 checksum

*/
		string id;
/*

	maximum number of items requested

*/
		int limit;
/*

	zero based index of the first data object to be returned

*/
		int offset;
	} GetM5nrMd5Params;
	typedef structure {
/*
	link to the previous set or null if this is the first set
*/
		string next;
/*
	link to the next set or null if this is the last set
*/
		string prev;
/*
	version of the object
*/
		int version;
/*
	annotation object
*/
		list<mapping<string, string>> data;
/*
	total number of available data items
*/
		int total_count;
/*
	resource location of this object instance
*/
		string url;
/*
	maximum number of data items returned, default is 10
*/
		int limit;
/*
	zero based index of the first returned data item
*/
		int offset;
	} M5nrMd5;
	typedef structure {
/*

	source name to restrict search by

*/
		string source;
/*

	text string of partial function name

*/
		string text;
/*

	name of the attribute the returned data is ordered by

*/
		string order;
/*

	if true return only those annotations that exactly match input text, default is false

*/
		int exact;
/*

	maximum number of items requested

*/
		int limit;
/*

	zero based index of the first data object to be returned

*/
		int offset;
	} GetM5nrFunctionParams;
	typedef structure {
/*
	link to the previous set or null if this is the first set
*/
		string next;
/*
	link to the next set or null if this is the last set
*/
		string prev;
/*
	version of the object
*/
		int version;
/*
	annotation object
*/
		list<mapping<string, string>> data;
/*
	total number of available data items
*/
		int total_count;
/*
	resource location of this object instance
*/
		string url;
/*
	maximum number of data items returned, default is 10
*/
		int limit;
/*
	zero based index of the first returned data item
*/
		int offset;
	} M5nrFunction;
	typedef structure {
/*

	source name to restrict search by

*/
		string source;
/*

	text string of partial organism name

*/
		string text;
/*

	name of the attribute the returned data is ordered by

*/
		string order;
/*

	if true return only those annotations that exactly match input text, default is false

*/
		int exact;
/*

	maximum number of items requested

*/
		int limit;
/*

	zero based index of the first data object to be returned

*/
		int offset;
	} GetM5nrOrganismParams;
	typedef structure {
/*
	link to the previous set or null if this is the first set
*/
		string next;
/*
	link to the next set or null if this is the last set
*/
		string prev;
/*
	version of the object
*/
		int version;
/*
	annotation object
*/
		list<mapping<string, string>> data;
/*
	total number of available data items
*/
		int total_count;
/*
	resource location of this object instance
*/
		string url;
/*
	maximum number of data items returned, default is 10
*/
		int limit;
/*
	zero based index of the first returned data item
*/
		int offset;
	} M5nrOrganism;
	typedef structure {
/*

	source name to restrict search by

*/
		string source;
/*

	text string of protein sequence

*/
		string text;
/*

	name of the attribute the returned data is ordered by

*/
		string order;
/*

	maximum number of items requested

*/
		int limit;
/*

	zero based index of the first data object to be returned

*/
		int offset;
	} GetM5nrSequenceParams;
	typedef structure {
/*
	link to the previous set or null if this is the first set
*/
		string next;
/*
	link to the next set or null if this is the last set
*/
		string prev;
/*
	version of the object
*/
		int version;
/*
	annotation object
*/
		list<mapping<string, string>> data;
/*
	total number of available data items
*/
		int total_count;
/*
	resource location of this object instance
*/
		string url;
/*
	maximum number of data items returned, default is 10
*/
		int limit;
/*
	zero based index of the first returned data item
*/
		int offset;
	} M5nrSequence;
	typedef structure {
/*

	name of the attribute the returned data is ordered by

*/
		string order;
/*

	unique identifier from source DB

*/
		list<string> data;
/*

	maximum number of items requested

*/
		int limit;
/*

	zero based index of the first data object to be returned

*/
		int offset;
	} PostM5nrAccessionParams;
	typedef structure {
/*
	link to the previous set or null if this is the first set
*/
		string next;
/*
	link to the next set or null if this is the last set
*/
		string prev;
/*
	version of the object
*/
		int version;
/*
	annotation object
*/
		list<mapping<string, string>> data;
/*
	total number of available data items
*/
		int total_count;
/*
	resource location of this object instance
*/
		string url;
/*
	maximum number of data items returned, default is 10
*/
		int limit;
/*
	zero based index of the first returned data item
*/
		int offset;
	} M5nrAccession;
	typedef structure {
/*

	source name to restrict search by

*/
		string source;
/*

	name of the attribute the returned data is ordered by

*/
		string order;
/*

	unique identifier in form of md5 checksum

*/
		list<string> data;
/*

	maximum number of items requested

*/
		int limit;
/*

	zero based index of the first data object to be returned

*/
		int offset;
	} PostM5nrMd5Params;
	typedef structure {
/*
	link to the previous set or null if this is the first set
*/
		string next;
/*
	link to the next set or null if this is the last set
*/
		string prev;
/*
	version of the object
*/
		int version;
/*
	annotation object
*/
		list<mapping<string, string>> data;
/*
	total number of available data items
*/
		int total_count;
/*
	resource location of this object instance
*/
		string url;
/*
	maximum number of data items returned, default is 10
*/
		int limit;
/*
	zero based index of the first returned data item
*/
		int offset;
	} M5nrMd5;
	typedef structure {
/*

	source name to restrict search by

*/
		string source;
/*

	name of the attribute the returned data is ordered by

*/
		string order;
/*

	if true return only those annotations that exactly match input text, default is false

*/
		int exact;
/*

	text string of partial function name

*/
		list<string> data;
/*

	maximum number of items requested

*/
		int limit;
/*

	zero based index of the first data object to be returned

*/
		int offset;
	} PostM5nrFunctionParams;
	typedef structure {
/*
	link to the previous set or null if this is the first set
*/
		string next;
/*
	link to the next set or null if this is the last set
*/
		string prev;
/*
	version of the object
*/
		int version;
/*
	annotation object
*/
		list<mapping<string, string>> data;
/*
	total number of available data items
*/
		int total_count;
/*
	resource location of this object instance
*/
		string url;
/*
	maximum number of data items returned, default is 10
*/
		int limit;
/*
	zero based index of the first returned data item
*/
		int offset;
	} M5nrFunction;
	typedef structure {
/*

	source name to restrict search by

*/
		string source;
/*

	name of the attribute the returned data is ordered by

*/
		string order;
/*

	if true return only those annotations that exactly match input text, default is false

*/
		int exact;
/*

	text string of partial organism name

*/
		list<string> data;
/*

	maximum number of items requested

*/
		int limit;
/*

	zero based index of the first data object to be returned

*/
		int offset;
	} PostM5nrOrganismParams;
	typedef structure {
/*
	link to the previous set or null if this is the first set
*/
		string next;
/*
	link to the next set or null if this is the last set
*/
		string prev;
/*
	version of the object
*/
		int version;
/*
	annotation object
*/
		list<mapping<string, string>> data;
/*
	total number of available data items
*/
		int total_count;
/*
	resource location of this object instance
*/
		string url;
/*
	maximum number of data items returned, default is 10
*/
		int limit;
/*
	zero based index of the first returned data item
*/
		int offset;
	} M5nrOrganism;
	typedef structure {
/*

	source name to restrict search by

*/
		string source;
/*

	name of the attribute the returned data is ordered by

*/
		string order;
/*

	text string of protein sequence

*/
		list<string> data;
/*

	maximum number of items requested

*/
		int limit;
/*

	zero based index of the first data object to be returned

*/
		int offset;
	} PostM5nrSequenceParams;
	typedef structure {
/*
	link to the previous set or null if this is the first set
*/
		string next;
/*
	link to the next set or null if this is the last set
*/
		string prev;
/*
	version of the object
*/
		int version;
/*
	annotation object
*/
		list<mapping<string, string>> data;
/*
	total number of available data items
*/
		int total_count;
/*
	resource location of this object instance
*/
		string url;
/*
	maximum number of data items returned, default is 10
*/
		int limit;
/*
	zero based index of the first returned data item
*/
		int offset;
	} M5nrSequence;
	typedef structure {
/*

This parameter value can be chosen from the following (the first being default):

	M5NR - comprehensive protein database
	M5RNA - comprehensive RNA database
	RefSeq - protein database, type organism, function, feature
	GenBank - protein database, type organism, function, feature
	IMG - protein database, type organism, function, feature
	SEED - protein database, type organism, function, feature
	TrEMBL - protein database, type organism, function, feature
	SwissProt - protein database, type organism, function, feature
	PATRIC - protein database, type organism, function, feature
	KEGG - protein database, type organism, function, feature
	RDP - RNA database, type organism, function, feature
	Greengenes - RNA database, type organism, function, feature
	LSU - RNA database, type organism, function, feature
	SSU - RNA database, type organism, function, feature

*/
		string source;
/*

	if true, return process id to query status resource for results.  default is false.

*/
		int asynchronous;
/*

This parameter value can be chosen from the following (the first being default):

	abundance - number of reads with hits in annotation
	evalue - average e-value exponent of hits in annotation
	identity - average percent identity of hits in annotation
	length - average alignment length of hits in annotation

*/
		string result_type;
/*

	filter the return results to only include abundances based on genes with this function

*/
		string filter;
/*

This parameter value can be chosen from the following (the first being default):

	strain - bottom organism taxanomic level
	species - organism type level
	genus - organism taxanomic level
	family - organism taxanomic level
	order - organism taxanomic level
	class - organism taxanomic level
	phylum - organism taxanomic level
	domain - top organism taxanomic level

*/
		string group_level;
/*

	if true, return annotation ID as NCBI tax id. Only for group_levels with a tax_id

*/
		int taxid;
/*

	filter the return results to only include annotations that contain this text

*/
		string grep;
/*

	value for minimum alignment length cutoff: default is 15

*/
		int length;
/*

	percent value for minimum % identity cutoff: default is 60

*/
		int identity;
/*

	negative exponent value for maximum e-value cutoff: default is 5

*/
		int evalue;
/*

This parameter value can be chosen from the following (the first being default):

	Subsystems - ontology database, type ontology only
	NOG - ontology database, type ontology only
	COG - ontology database, type ontology only
	KO - ontology database, type ontology only

*/
		string filter_source;
/*

	one or more metagenome or project unique identifier

*/
		string id;
/*

	if false, return metagenome metadata set in 'columns' object.  default is false.

*/
		int hide_metadata;
/*

This parameter value can be chosen from the following (the first being default):

	all - returns results based on all organisms that map to top hit per read-feature
	single - returns results based on a single organism for top hit per read-feature
	lca - returns results based on the Least Common Ancestor for all organisms (M5NR+M5RNA only) that map to hits from a read-feature

*/
		string hit_type;
/*

This parameter value can be chosen from the following (the first being default):

	function - bottom function ontology level
	level3 - function ontology level
	level2 - function ontology level
	level1 - top function ontology level

*/
		string filter_level;
	} GetMatrixOrganismParams;
	typedef structure {
/*
	identifier of the data generator
*/
		string generated_by;
/*
	type of the data encoding matrix (dense or sparse)
*/
		string matrix_type;
/*
	time the output data was generated
*/
		string date;
/*
	the matrix values
*/
		list<list<float>> data;
/*
	rows object
*/
		list<mapping<string, string>> rows;
/*
	result_type of the elements in the return matrix
*/
		string matrix_element_value;
/*
	data type of the elements in the return matrix
*/
		string matrix_element_type;
/*
	url to the format specification
*/
		string format_url;
/*
	format specification name
*/
		string format;
/*
	columns object
*/
		list<mapping<string, string>> columns;
/*
	resource location of this object instance
*/
		string url;
/*
	list of the dimension sizes of the return matrix
*/
		list<int> shape;
/*
	unique object identifier
*/
		string id;
/*
	type of the data in the return table (taxon, function or gene)
*/
		string type;
	} MatrixOrganism;
	typedef structure {
/*

This parameter value can be chosen from the following (the first being default):

	Subsystems - ontology database, type ontology only
	NOG - ontology database, type ontology only
	COG - ontology database, type ontology only
	KO - ontology database, type ontology only

*/
		string source;
/*

	if true, return process id to query status resource for results.  default is false.

*/
		int asynchronous;
/*

This parameter value can be chosen from the following (the first being default):

	abundance - number of reads with hits in annotation
	evalue - average e-value exponent of hits in annotation
	identity - average percent identity of hits in annotation
	length - average alignment length of hits in annotation

*/
		string result_type;
/*

	filter the return results to only include abundances based on genes with this organism

*/
		string filter;
/*

This parameter value can be chosen from the following (the first being default):

	function - bottom function ontology level
	level3 - function ontology level
	level2 - function ontology level
	level1 - top function ontology level

*/
		string group_level;
/*

	filter the return results to only include annotations that contain this text

*/
		string grep;
/*

	value for minimum alignment length cutoff: default is 15

*/
		int length;
/*

	percent value for minimum % identity cutoff: default is 60

*/
		int identity;
/*

	negative exponent value for maximum e-value cutoff: default is 5

*/
		int evalue;
/*

This parameter value can be chosen from the following (the first being default):

	M5NR - comprehensive protein database
	M5RNA - comprehensive RNA database
	RefSeq - protein database, type organism, function, feature
	GenBank - protein database, type organism, function, feature
	IMG - protein database, type organism, function, feature
	SEED - protein database, type organism, function, feature
	TrEMBL - protein database, type organism, function, feature
	SwissProt - protein database, type organism, function, feature
	PATRIC - protein database, type organism, function, feature
	KEGG - protein database, type organism, function, feature
	RDP - RNA database, type organism, function, feature
	Greengenes - RNA database, type organism, function, feature
	LSU - RNA database, type organism, function, feature
	SSU - RNA database, type organism, function, feature

*/
		string filter_source;
/*

	one or more metagenome or project unique identifier

*/
		string id;
/*

	if false return metagenome metadata set in 'columns' object

*/
		int hide_metadata;
/*

This parameter value can be chosen from the following (the first being default):

	strain - bottom organism taxanomic level
	species - organism type level
	genus - organism taxanomic level
	family - organism taxanomic level
	order - organism taxanomic level
	class - organism taxanomic level
	phylum - organism taxanomic level
	domain - top organism taxanomic level

*/
		string filter_level;
	} GetMatrixFunctionParams;
	typedef structure {
/*
	identifier of the data generator
*/
		string generated_by;
/*
	type of the data encoding matrix (dense or sparse)
*/
		string matrix_type;
/*
	time the output data was generated
*/
		string date;
/*
	the matrix values
*/
		list<list<float>> data;
/*
	rows object
*/
		list<mapping<string, string>> rows;
/*
	result_type of the elements in the return matrix
*/
		string matrix_element_value;
/*
	data type of the elements in the return matrix
*/
		string matrix_element_type;
/*
	url to the format specification
*/
		string format_url;
/*
	format specification name
*/
		string format;
/*
	columns object
*/
		list<mapping<string, string>> columns;
/*
	resource location of this object instance
*/
		string url;
/*
	list of the dimension sizes of the return matrix
*/
		list<int> shape;
/*
	unique object identifier
*/
		string id;
/*
	type of the data in the return table (taxon, function or gene)
*/
		string type;
	} MatrixFunction;
	typedef structure {
/*

This parameter value can be chosen from the following (the first being default):

	RefSeq - protein database, type organism, function, feature
	GenBank - protein database, type organism, function, feature
	IMG - protein database, type organism, function, feature
	SEED - protein database, type organism, function, feature
	TrEMBL - protein database, type organism, function, feature
	SwissProt - protein database, type organism, function, feature
	PATRIC - protein database, type organism, function, feature
	KEGG - protein database, type organism, function, feature
	RDP - RNA database, type organism, function, feature
	Greengenes - RNA database, type organism, function, feature
	LSU - RNA database, type organism, function, feature
	SSU - RNA database, type organism, function, feature

*/
		string source;
/*

	if true, return process id to query status resource for results.  default is false.

*/
		int asynchronous;
/*

This parameter value can be chosen from the following (the first being default):

	abundance - number of reads with hits in annotation
	evalue - average e-value exponent of hits in annotation
	identity - average percent identity of hits in annotation
	length - average alignment length of hits in annotation

*/
		string result_type;
/*

	filter the return results to only include annotations that contain this text

*/
		string grep;
/*

	value for minimum alignment length cutoff: default is 15

*/
		int length;
/*

	negative exponent value for maximum e-value cutoff: default is 5

*/
		int evalue;
/*

	percent value for minimum % identity cutoff: default is 60

*/
		int identity;
/*

	one or more metagenome or project unique identifier

*/
		string id;
/*

	if false return metagenome metadata set in 'columns' object

*/
		int hide_metadata;
	} GetMatrixFeatureParams;
	typedef structure {
/*
	identifier of the data generator
*/
		string generated_by;
/*
	type of the data encoding matrix (dense or sparse)
*/
		string matrix_type;
/*
	time the output data was generated
*/
		string date;
/*
	the matrix values
*/
		list<list<float>> data;
/*
	rows object
*/
		list<mapping<string, string>> rows;
/*
	result_type of the elements in the return matrix
*/
		string matrix_element_value;
/*
	data type of the elements in the return matrix
*/
		string matrix_element_type;
/*
	url to the format specification
*/
		string format_url;
/*
	format specification name
*/
		string format;
/*
	columns object
*/
		list<mapping<string, string>> columns;
/*
	resource location of this object instance
*/
		string url;
/*
	list of the dimension sizes of the return matrix
*/
		list<int> shape;
/*
	unique object identifier
*/
		string id;
/*
	type of the data in the return table (taxon, function or gene)
*/
		string type;
	} MatrixFeature;
	typedef structure {
/*
	eps and their metadata
*/
		mapping<string, string> ep;
/*
	projects and their metadata
*/
		mapping<string, string> project;
/*
	libraries and their metadata
*/
		mapping<string, string> library;
/*
	samples and their metadata
*/
		mapping<string, string> sample;
	} MetadataTemplate;
	typedef structure {
/*
	ontology IDs for metadata
*/
		mapping<string, string> ontology;
/*
	term IDs for metadata
*/
		mapping<string, string> ont_id;
/*
	list of CV terms for metadata
*/
		mapping<string, string> select;
	} MetadataCv;
	typedef structure {
/*

	unique object identifier

*/
		string id;
	} GetMetadataExportParams;
	typedef structure {
/*
	number of samples in project
*/
		int sampleNum;
/*
	sample object containing sample metadata, sample libraries, sample envPackage
*/
		list<mapping<string, string>> samples;
/*
	human readable identifier
*/
		string name;
/*
	hash of metadata by label
*/
		mapping<string, string> data;
/*
	unique object identifier
*/
		string id;
	} MetadataExport;
	typedef structure {
/*

	xlsx or xls format spreadsheet with metadata

*/
		string upload;
	} PostMetadataValidateParams;
	typedef structure {
/*
	valid metadata object for project and its samples and libraries
*/
		mapping<string, string> metadata;
/*
	if not valid, reason why
*/
		string message;
/*
	the metadata sheet is valid
*/
		int is_valid;
	} MetadataValidate;
	typedef structure {
/*

This parameter value can be chosen from the following (the first being default):

	mixs - label is part of MIxS (minimal) metadata
	mims - label is part of MIMS (metagenome) metadata
	migs - label is part of MIGS (genome) metadata

*/
		string group;
/*

	metadata value

*/
		string value;
/*

This parameter value can be chosen from the following (the first being default):

	project - label belongs to project metadata
	sample - label belongs to sample metadata
	library - label belongs to library metadata
	env_package - label belongs to env_package metadata

*/
		string category;
/*

	metadata label

*/
		string label;
	} GetMetadataValidateParams;
	typedef structure {
/*
	if not valid, reason why
*/
		string message;
/*
	the inputed value is valid for the given category and label
*/
		int is_valid;
	} MetadataValidate;
	typedef structure {
/*

This parameter value can be chosen from the following (the first being default):

	minimal - returns only minimal information
	mixs - returns all GSC MIxS metadata
	metadata - returns minimal with metadata
	stats - returns minimal with statistics
	full - returns all metadata and statistics

*/
		string verbosity;
/*

	search parameter: query string for function

*/
		string function;
/*

This parameter value can be chosen from the following (the first being default):

	both - returns all data (public and private) user has access to view
	public - returns all public data
	private - returns private data user has access to view

*/
		string status;
/*

This parameter value can be chosen from the following (the first being default):

	all - return metagenomes that match all search parameters
	any - return metagenomes that match any search parameters

*/
		string match;
/*

This parameter value can be chosen from the following (the first being default):

	asc - sort by ascending order
	desc - sort by descending order

*/
		string direction;
/*

	metagenome object field to sort by (default is id)

*/
		string order;
/*

	search parameter: query string for any metadata field

*/
		string metadata;
/*

	maximum number of items requested

*/
		int limit;
/*

	search parameter: query string for organism

*/
		string organism;
/*

	search parameter: md5 checksum of feature sequence

*/
		string md5;
/*

	zero based index of the first data object to be returned

*/
		int offset;
	} GetMetagenomeQueryParams;
	typedef structure {
/*
	link to the previous set or null if this is the first set
*/
		string next;
/*
	link to the next set or null if this is the last set
*/
		string prev;
/*
	version of the object
*/
		int version;
/*
	metagenome object
*/
		list<mapping<string, string>> data;
/*
	total number of available data items
*/
		int total_count;
/*
	name of the attribute the returned data is ordered by
*/
		string order;
/*
	resource location of this object instance
*/
		string url;
/*
	maximum number of data items returned, default is 10
*/
		int limit;
/*
	zero based index of the first returned data item
*/
		int offset;
	} MetagenomeQuery;
	typedef structure {
/*

This parameter value can be chosen from the following (the first being default):

	minimal - returns only minimal information
	metadata - returns minimal with metadata
	stats - returns minimal with statistics
	full - returns all metadata and statistics

*/
		string verbosity;
/*

	unique object identifier

*/
		string id;
	} GetMetagenomeInstanceParams;
	typedef structure {
/*
	key value pairs describing statistics
*/
		mapping<string, string> statistics;
/*
	ARRAY(0x1d20d20)
*/
		string status;
/*
	version of the metagenome
*/
		int version;
/*
	reference to the project object
*/
		string project;
/*
	name of metagenome
*/
		string name;
/*
	sequencing type
*/
		string sequence_type;
/*
	reference to the related library object
*/
		string library;
/*
	time the metagenome was first created
*/
		string created;
/*
	resource location of this object instance
*/
		string url;
/*
	unique metagenome identifier
*/
		string id;
/*
	reference to the related sample object
*/
		string sample;
/*
	key value pairs describing all metadata
*/
		mapping<string, string> metadata;
/*
	key value pairs describing MIxS metadata
*/
		mapping<string, string> mixs;
	} MetagenomeInstance;
	typedef structure {
/*

This parameter value can be chosen from the following (the first being default):

	minimal - returns only minimal information
	verbose - returns all metadata
	full - returns all metadata and references

*/
		string verbosity;
/*

This parameter value can be chosen from the following (the first being default):

	id - return data objects ordered by id
	name - return data objects ordered by name

*/
		string order;
/*

	maximum number of items requested

*/
		int limit;
/*

	zero based index of the first data object to be returned

*/
		int offset;
	} GetProjectQueryParams;
	typedef structure {
/*
	link to the previous set or null if this is the first set
*/
		string next;
/*
	link to the next set or null if this is the last set
*/
		string prev;
/*
	name of the attribute the returned data is ordered by
*/
		string order;
/*
	maximum number of data items returned, default is 10
*/
		int limit;
/*
	list of the project objects
*/
		list<mapping<string, string>> data;
/*
	zero based index of the first returned data item
*/
		int offset;
/*
	total number of available data items
*/
		int total_count;
	} ProjectQuery;
	typedef structure {
/*

This parameter value can be chosen from the following (the first being default):

	minimal - returns only minimal information
	verbose - returns all metadata
	full - returns all metadata and references

*/
		string verbosity;
/*

	unique object identifier

*/
		string id;
	} GetProjectInstanceParams;
	typedef structure {
/*
	ARRAY(0x1d27630)
*/
		string status;
/*
	version of the object
*/
		int version;
/*
	human readable identifier
*/
		string name;
/*
	a short, comprehensive description of the project
*/
		string description;
/*
	time the object was first created
*/
		string created;
/*
	the official name of the source of funding of this project
*/
		string funding_source;
/*
	resource location of this object instance
*/
		string url;
/*
	key value pairs describing metadata
*/
		mapping<string, string> metadata;
/*
	unique object identifier
*/
		string id;
/*
	the first and last name of the principal investigator of the project
*/
		string pi;
	} ProjectInstance;
	typedef structure {
/*

This parameter value can be chosen from the following (the first being default):

	id - return data objects ordered by id
	name - return data objects ordered by name

*/
		string order;
/*

	maximum number of items requested

*/
		int limit;
/*

	zero based index of the first data object to be returned

*/
		int offset;
	} GetSampleQueryParams;
	typedef structure {
/*
	link to the previous set or null if this is the first set
*/
		string next;
/*
	link to the next set or null if this is the last set
*/
		string prev;
/*
	name of the attribute the returned data is ordered by
*/
		string order;
/*
	maximum number of data items returned, default is 10
*/
		int limit;
/*
	list of sample objects
*/
		list<mapping<string, string>> data;
/*
	zero based index of the first returned data item
*/
		int offset;
/*
	total number of available data items
*/
		int total_count;
	} SampleQuery;
	typedef structure {
/*

This parameter value can be chosen from the following (the first being default):

	minimal - returns only minimal information
	verbose - returns all metadata
	full - returns all metadata and references

*/
		string verbosity;
/*

	unique object identifier

*/
		string id;
	} GetSampleInstanceParams;
	typedef structure {
/*
	version of the object
*/
		int version;
/*
	reference to the project of this sample
*/
		string project;
/*
	human readable identifier
*/
		string name;
/*
	time the object was first created
*/
		string created;
/*
	environmental package object
*/
		mapping<string, string> env_package;
/*
	resource location of this object instance
*/
		string url;
/*
	unique object identifier
*/
		string id;
/*
	key value pairs describing metadata
*/
		mapping<string, string> metadata;
	} SampleInstance;


/* All annotations of a metagenome for a specific annotation type and source
tab deliminted annotated sequence stream
*/
	funcdef get_annotation_sequence(GetAnnotationSequenceParams) returns (AnnotationSequence);


/* All annotations of a metagenome for a specific annotation type and source
tab deliminted blast m8 with annotation
*/
	funcdef get_annotation_similarity(GetAnnotationSimilarityParams) returns (AnnotationSimilarity);


/* Calculate a PCoA for given input data.
Calculate normalized values for given input data.
*/
	funcdef post_compute_normalize(PostComputeNormalizeParams) returns (ComputeNormalize);


/* Calculate a PCoA for given input data.
Calculate a dendogram for given input data.
*/
	funcdef post_compute_heatmap(PostComputeHeatmapParams) returns (ComputeHeatmap);


/* Calculate a PCoA for given input data.
Calculate a PCoA for given input data.
*/
	funcdef post_compute_pcoa(PostComputePcoaParams) returns (ComputePcoa);


/* An analysis file from the processing of a metagenome from a specific stage in its analysis
Returns a single sequence file.
*/
	funcdef get_download_instance(GetDownloadInstanceParams) returns (DownloadInstance);


/* An analysis file from the processing of a metagenome from a specific stage in its analysis
Returns a list of sets of sequence files for the given id.
*/
	funcdef get_download_setlist(GetDownloadSetlistParams) returns (DownloadSetlist);


/* inbox receives user inbox data upload, requires authentication, see http://blog.metagenomics.anl.gov/mg-rast-v3-2-faq/#api_submission for details
lists the contents of the user inbox
*/
	funcdef get_inbox_view(GetInboxViewParams) returns (InboxView);


/* inbox receives user inbox data upload, requires authentication, see http://blog.metagenomics.anl.gov/mg-rast-v3-2-faq/#api_submission for details
receives user inbox data upload
*/
	funcdef post_inbox_upload(PostInboxUploadParams) returns (InboxUpload);


/* A library of metagenomic samples from some environment
Returns a set of data matching the query criteria.
*/
	funcdef get_library_query(GetLibraryQueryParams) returns (LibraryQuery);


/* A library of metagenomic samples from some environment
Returns a single data object.
*/
	funcdef get_library_instance(GetLibraryInstanceParams) returns (LibraryInstance);


/* M5NR provides data through a comprehensive non-redundant protein / rRNA database
Return functional hierarchy
*/
	funcdef get_m5nr_ontology(GetM5nrOntologyParams) returns (M5nrOntology);


/* M5NR provides data through a comprehensive non-redundant protein / rRNA database
Return organism hierarchy
*/
	funcdef get_m5nr_taxonomy(GetM5nrTaxonomyParams) returns (M5nrTaxonomy);


/* M5NR provides data through a comprehensive non-redundant protein / rRNA database
Return all sources in M5NR
*/
	funcdef get_m5nr_sources() returns (M5nrSources);


/* M5NR provides data through a comprehensive non-redundant protein / rRNA database
Return annotation or sequence of given source protein ID
*/
	funcdef get_m5nr_accession(GetM5nrAccessionParams) returns (M5nrAccession);


/* M5NR provides data through a comprehensive non-redundant protein / rRNA database
Return annotation(s) or sequence of given md5sum (M5NR ID)
*/
	funcdef get_m5nr_md5(GetM5nrMd5Params) returns (M5nrMd5);


/* M5NR provides data through a comprehensive non-redundant protein / rRNA database
Return annotations for function names containing the given text
*/
	funcdef get_m5nr_function(GetM5nrFunctionParams) returns (M5nrFunction);


/* M5NR provides data through a comprehensive non-redundant protein / rRNA database
Return annotations for organism names containing the given text
*/
	funcdef get_m5nr_organism(GetM5nrOrganismParams) returns (M5nrOrganism);


/* M5NR provides data through a comprehensive non-redundant protein / rRNA database
Return annotation(s) for md5sum (M5NR ID) of given sequence
*/
	funcdef get_m5nr_sequence(GetM5nrSequenceParams) returns (M5nrSequence);


/* M5NR provides data through a comprehensive non-redundant protein / rRNA database
Return annotations of given source protein IDs
*/
	funcdef post_m5nr_accession(PostM5nrAccessionParams) returns (M5nrAccession);


/* M5NR provides data through a comprehensive non-redundant protein / rRNA database
Return annotations of given md5sums (M5NR ID)
*/
	funcdef post_m5nr_md5(PostM5nrMd5Params) returns (M5nrMd5);


/* M5NR provides data through a comprehensive non-redundant protein / rRNA database
Return annotations for function names containing the given texts
*/
	funcdef post_m5nr_function(PostM5nrFunctionParams) returns (M5nrFunction);


/* M5NR provides data through a comprehensive non-redundant protein / rRNA database
Return annotations for organism names containing the given texts
*/
	funcdef post_m5nr_organism(PostM5nrOrganismParams) returns (M5nrOrganism);


/* M5NR provides data through a comprehensive non-redundant protein / rRNA database
Return annotations for md5s (M5NR ID) of given sequences
*/
	funcdef post_m5nr_sequence(PostM5nrSequenceParams) returns (M5nrSequence);


/* A profile in biom format that contains abundance counts
Returns a BIOM object.
*/
	funcdef get_matrix_organism(GetMatrixOrganismParams) returns (MatrixOrganism);


/* A profile in biom format that contains abundance counts
Returns a BIOM object.
*/
	funcdef get_matrix_function(GetMatrixFunctionParams) returns (MatrixFunction);


/* A profile in biom format that contains abundance counts
Returns a BIOM object.
*/
	funcdef get_matrix_feature(GetMatrixFeatureParams) returns (MatrixFeature);


/* Metagenomic metadata is data providing information about one or more aspects of a set sequences from a sample of some environment
Returns static template for metadata object relationships and types
*/
	funcdef get_metadata_template() returns (MetadataTemplate);


/* Metagenomic metadata is data providing information about one or more aspects of a set sequences from a sample of some environment
Returns static controlled vocabularies used in metadata
*/
	funcdef get_metadata_cv() returns (MetadataCv);


/* Metagenomic metadata is data providing information about one or more aspects of a set sequences from a sample of some environment
Returns full nested metadata for a project in same format as template
*/
	funcdef get_metadata_export(GetMetadataExportParams) returns (MetadataExport);


/* Metagenomic metadata is data providing information about one or more aspects of a set sequences from a sample of some environment
Validate given metadata spreadsheet
*/
	funcdef post_metadata_validate(PostMetadataValidateParams) returns (MetadataValidate);


/* Metagenomic metadata is data providing information about one or more aspects of a set sequences from a sample of some environment
Validate given metadata value
*/
	funcdef get_metadata_validate(GetMetadataValidateParams) returns (MetadataValidate);


/* A metagenome is an analyzed set sequences from a sample of some environment
Returns a set of data matching the query criteria.
*/
	funcdef get_metagenome_query(GetMetagenomeQueryParams) returns (MetagenomeQuery);


/* A metagenome is an analyzed set sequences from a sample of some environment
Returns a single data object.
*/
	funcdef get_metagenome_instance(GetMetagenomeInstanceParams) returns (MetagenomeInstance);


/* A project is a composition of samples, libraries and metagenomes being analyzed in a global context.
Returns a set of data matching the query criteria.
*/
	funcdef get_project_query(GetProjectQueryParams) returns (ProjectQuery);


/* A project is a composition of samples, libraries and metagenomes being analyzed in a global context.
Returns a single data object.
*/
	funcdef get_project_instance(GetProjectInstanceParams) returns (ProjectInstance);


/* A metagenomic sample from some environment.
Returns a set of data matching the query criteria.
*/
	funcdef get_sample_query(GetSampleQueryParams) returns (SampleQuery);


/* A metagenomic sample from some environment.
Returns a single data object.
*/
	funcdef get_sample_instance(GetSampleInstanceParams) returns (SampleInstance);
};